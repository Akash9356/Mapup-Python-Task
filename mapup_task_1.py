# -*- coding: utf-8 -*-
"""Mapup Task - 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lTljpJ10JyCl9KvV45jf53U9G1Iv1ADU

# **Question 1: Car Matrix Generation**
"""

import pandas as pd

import numpy as np

def generate_car_matrix(csv_file_path):
    # Load the CSV dataset into a pandas DataFrame
    df = pd.read_csv("/content/dataset-1.csv")

    # Pivot the DataFrame to create the desired matrix
    car_matrix = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)

    # Set diagonal values to 0
    for idx in car_matrix.index:
        car_matrix.at[idx, idx] = 0

    return car_matrix

csv_file_path = '/content/dataset-1.csv'
result_matrix = generate_car_matrix("/content/dataset-1.csv")

print("Generated Car Matrix:")
print(result_matrix)

"""# **Question 2: Car Type Count Calculation**"""

import pandas as pd

import numpy as np

def get_type_count(csv_file_path):
    # Load the CSV dataset into a pandas DataFrame
    df = pd.read_csv("/content/dataset-1.csv")

    # Create a new categorical column 'car_type'
    conditions = [
        (df['car'] <= 15),
        (df['car'] > 15) & (df['car'] <= 25),
        (df['car'] > 25)
    ]
    choices = ['low', 'medium', 'high']
    df['car_type'] = pd.Series(np.select(conditions, choices, default=np.nan))

    # Calculate the count of occurrences for each 'car_type' category
    type_count = df['car_type'].value_counts().to_dict()

    # Sort the dictionary alphabetically based on keys
    sorted_type_count = {k: type_count[k] for k in sorted(type_count)}

    return sorted_type_count

# Example usage:
csv_file_path = '/content/dataset-1.csv'
result_type_count = get_type_count("/content/dataset-1.csv")

# Display the resulting type count dictionary
print("Car Type Count:")
print(result_type_count)

"""# **Bus Count Index Retrieval**"""

import pandas as pd

def get_bus_indexes(csv_file_path):
    # Load the CSV dataset into a pandas DataFrame
    df = pd.read_csv("/content/dataset-1.csv")

    # Calculate the mean value of the 'bus' column
    bus_mean = df['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()

    # Sort the indices in ascending order
    bus_indexes.sort()

    return bus_indexes

# Example usage:
csv_file_path = '/content/dataset-1.csv'
result_bus_indexes = get_bus_indexes("/content/dataset-1.csv")

# Display the resulting list of bus indices
print("Bus Indexes with Values > 2 * Mean:")
print(result_bus_indexes)

"""# **Route Filtering**"""

import pandas as pd

def filter_routes(csv_file_path):
    # Load the CSV dataset into a pandas DataFrame
    df = pd.read_csv("/content/dataset-1.csv")

    # Group by 'route' and calculate the average of the 'truck' column
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average of 'truck' values is greater than 7
    selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of selected routes
    selected_routes.sort()

    return selected_routes

# Example usage:
csv_file_path = '/content/dataset-1.csv'
result_routes = filter_routes(csv_file_path)

# Display the resulting sorted list of routes
print("Selected Routes with Average Truck > 7:")
print(result_routes)

"""# **Matrix Value Modification**

# **Matrix Value Modification**
"""

import pandas as pd

def multiply_matrix(result_matrix):
    # Create a copy of the input DataFrame to avoid modifying the original
    modified_matrix = result_matrix.copy()

    # Apply the specified logic to modify values
    modified_matrix[modified_matrix > 20] *= 0.75
    modified_matrix[modified_matrix <= 20] *= 1.25

    # Round values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

# Example usage:
# Assuming result_matrix is the DataFrame from Question 1
modified_result_matrix = multiply_matrix(result_matrix)

# Display the modified DataFrame
print("Modified Car Matrix:")
print(modified_result_matrix)

import pandas as pd
df = pd.read_csv("/content/dataset-2.csv")

def check_time_completeness(df):
    # Combine 'startDay' and 'startTime' columns to create a 'start_timestamp' column
    df['start_timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])

    # Combine 'endDay' and 'endTime' columns to create an 'end_timestamp' column
    df['end_timestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])

    # Check if the timestamps cover a full 24-hour period and span all 7 days
    time_completeness = (
        (df['end_timestamp'] - df['start_timestamp'] == pd.Timedelta(days=1)) &
        (df['start_timestamp'].dt.time == pd.to_datetime('00:00:00').time()) &
        (df['end_timestamp'].dt.time == pd.to_datetime('23:59:59').time()) &
        (df['start_timestamp'].dt.dayofweek == 0) &  # Monday
        (df['end_timestamp'].dt.dayofweek == 6)      # Sunday
    )

    # Create a boolean series with multi-index (id, id_2)
    result_series = time_completeness.groupby(['id', 'id_2']).all()

    return result_series

# Example usage:
# Assuming df is the DataFrame from dataset-2.csv
result_bool_series = check_time_completeness(df)

# Display the resulting boolean series
print("Time Completeness Check:")
print(result_bool)

"""# **Time Check**"""

import pandas as pd

def check_time_completeness(df):
    # Combine 'startDay' and 'startTime' columns to create a 'start_timestamp' column
    df['start_timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])

    # Combine 'endDay' and 'endTime' columns to create an 'end_timestamp' column
    df['end_timestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])

    # Check if the timestamps cover a full 24-hour period and span all 7 days
    time_completeness = (
        (df['end_timestamp'] - df['start_timestamp'] == pd.Timedelta(days=1)) &
        (df['start_timestamp'].dt.time == pd.to_datetime('00:00:00').time()) &
        (df['end_timestamp'].dt.time == pd.to_datetime('23:59:59').time()) &
        (df['start_timestamp'].dt.dayofweek == 0) &  # Monday
        (df['end_timestamp'].dt.dayofweek == 6)      # Sunday
    )

    # Create a boolean series with multi-index (id, id_2)
    result_series = time_completeness.groupby(['id', 'id_2']).all()

    return result_series

# Example usage:
# Load the dataset into a DataFrame
csv_file_path = '/content/dataset-2.csv'
df = pd.read_csv(csv_file_path)

# Call the function with the DataFrame
result_bool_series = check_time_completeness(df)

# Display the resulting boolean series
print("Time Completeness Check:")
print(result_bool_series)